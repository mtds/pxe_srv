#!/usr/bin/env ruby

require 'erb'
require 'pathname'
require 'pp'
require 'sinatra'
require 'yaml'

configure do

  config_file = nil
  config_env = 'PXESRV_CONF'
  if ENV.has_key? config_env
    config_file = ENV[config_env]
  end

  root_path = nil
  root_env = 'PXESRV_ROOT'
  if ENV.has_key? root_env
    root_path = ENV[root_env]
  end

  # configuration file takes precedents 
  if not config_file.nil?
    # Parse the configuration file
    config=YAML.load_file(config_file)
    public_path = config['config']['public']
    views_path = config['config']['views']
  # if the service root path has been defined
  elsif not root_path.nil?
    public_path = "#{root_path}/public"
    views_path = "#{root_path}/views"
  else
    $stderr.puts "Make sure to use a configuration file or environment variable to specify the document roots"
  end

  if not File.directory? public_path
    $stderr.puts "#{public_path} is missing"
    exit 1
  end
  if not File.directory? views_path
    $stderr.puts "#{views_path} is missing"
    exit 1
  end

  # Sets the document root for serving static files:
  set :public_dir, public_path
  # Sets the 'views' directory for erb templates:
  set :views, views_path
  # Do not show exceptions
  set :show_exceptions, false

  # default location of the service log
  log_file = '/var/log/pxesrv.log'
  # an environment variable may define an alternative 
  log_env = 'PXESRV_LOG'
  log_file = ENV[log_env] if ENV.has_key? log_env

  # Log to file (ref: http://recipes.sinatrarb.com/p/middleware/rack_commonlogger)
  log_handel = File.new(log_file, 'a+')
  log_handel.sync = true
  use Rack::CommonLogger, log_handel

end

# Server will always return contents in text format:
before do
  content_type :txt
end

#
# Installation with iPXE 
#

# Basic route name as configured in the 'Filename' option on the DHCP server.
get '/menu' do

  ip = request.ip
  host = request.host

  pub = settings.public_dir
  target = "#{pub}/menu.ipxe"

  [
    "#{pub}/link/#{host}", 
    "#{pub}/link/#{ip}"
  ].each do |path|
    # Verify whether the symlink exist and it's not broken:
    if File.exist?(path) && File.symlink?(path)
      target = File.readlink(Pathname.new(path).expand_path)
      File.delete(path) # remove the symlink
    else
      logger.info "Missing #{path}"
    end
  end

  logger.info "Redirect ip=#{ip} hostname=#{host} to #{target}"
  send_file(target)

end

#
# Installation with pxelinux
#

# Default route:
get '/pxelinux.cfg/default' do
  send_file(settings.public_dir + '/pxelinux.cfg/default')
end

# ERB template installation:
get '/pxelinux.cfg/:name' do
end

# Gracefully handle 404 errors:
not_found do
  "The requested route is not available"
end

